generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// "users" table.
model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(150)
  name      String   @db.VarChar(100)

  @@map("users")
}

// "expenses" table.
model Expense {
  id        String          @id @default(uuid())
  link      String          @db.VarChar(250)
  date      DateTime
  status    ExpenseStatus   @default(PENDING)
  createdBy String
  updatedBy String
  createdAt DateTime        @default(now())
  updatedAt DateTime

  // relations
  expenseCategoryId Int
  category  ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])

  expenseItems ExpenseItem[]

  @@map("expenses")
}

enum ExpenseStatus {
  PENDING
  PAID
  CANCELLED
}

// "expense_categories" table.
model ExpenseCategory {
  id    Int                 @id @default(autoincrement())
  type  ExpenseCategoryType
  name  String              @db.VarChar(100)

  // relations
  expenses Expense[]

  @@unique([type, name])
  @@map("expense_categories")
}

enum ExpenseCategoryType {
  OPERATING
  SERVICE
  SUPPLY
  MISCELLANEOUS
  EXTRAORDINARY
  SALARY
  DAILY
  FUEL
  PERCEPTION
  STATIONERY
  CLEANING
  MAINTENANCE
  CAPTURE
}

// "expense_items" table.
model ExpenseItem {
  id          String   @id @default(uuid())
  unitPrice   Decimal  @db.Decimal(12, 2)
  quantity    Int // Should be more than 0. Validate in the code.
  description String?  @db.VarChar(250)

  // one of productId or serviceId must be valid, but not both.
  // both cannot be null at the same time. Validate in the code.
  // relations
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id])

  serviceId   Int?
  service     Service? @relation(fields: [serviceId], references: [id])

  expenseId   String
  expense     Expense @relation(fields: [expenseId], references: [id])

  @@map("expense_items")
}

// "products" table.
model Product {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(100)

  // relations
  expenseItems ExpenseItem[]

  @@map("products")
}

// "services" table.
model Service {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  entryDate     DateTime
  expiryDate    DateTime
  // categoryId // FK a tabla que no existe, "ServiceCategory" table.

  // relations
  expenseItems  ExpenseItem[]
  providerId    Int
  provider      Provider @relation(fields: [providerId], references: [id])
  
  @@map("services")
}

// "providers" table.
model Provider {
  id            Int     @id @default(autoincrement())
  legalName     String  @db.VarChar(150)
  businessName  String  @db.VarChar(150)
  cuit          String  @db.VarChar(80)
  email         String? @db.VarChar(150)
  telephone     String  @db.VarChar(50)
  address       String  @db.VarChar(150)

  // relations
  vatCategoryId Int
  vatCategory   VatCategory @relation(fields: [vatCategoryId], references: [id])
  services      Service[]

  @@unique([cuit, email])
  @@map("providers")
}

// "vat_categories" table.
model VatCategory {
  id    Int             @id @default(autoincrement())
  type  VatCategoryType
  name  String          @db.VarChar(100) 

  // relations
  providers Provider[]

  @@unique([type, name])
  @@map("vat_categories")
}

enum VatCategoryType {
  REGISTERED_RESPONSIBLE
  MONOTAX
  EXEMPT
  NOT_RESPONSIBLE
  FINAL_CONSUMER
  UNCATEGORIZED_SUBJECT
  UNREGISTERED_RESPONSIBLE
  SUBJECT_TO_VAT_WITHHOLDING
  NOT_SUBJECT_TO_VAT
  REGISTERED_RESPONSIBLE_M
}