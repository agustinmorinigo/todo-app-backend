generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// "users" table.
model User {
  id              String        @id @default(uuid())
  name            String        @db.VarChar(80)
  lastName        String        @db.VarChar(80)
  documentType    DocumentType  @default(DNI)
  documentValue   String        @db.VarChar(30)
  email           String        @unique @db.VarChar(150)
  telephone       String        @db.VarChar(30)
  role            UserRole

  // relations
  organizations   UserOrganization[]

  @@map("users")
}

enum UserRole {
  ADMIN
  ACCOUNTANT
  CLERK
  DOCTOR
  PATIENT
}

enum DocumentType {
  DNI
  LE
  LC
  CI
  PASSPORT
  OTHER
}


// "organizations" table.
model Organization {
  id              String        @id @default(uuid())
  legalName       String        @unique @db.VarChar(80)
  businessName    String        @db.VarChar(80)
  address         String        @db.VarChar(180)
  vatCategoryId   Int
  cuit            String        @db.VarChar(20)

  // relations
  vatCategory     VatCategory   @relation(fields: [vatCategoryId], references: [id])
  users           UserOrganization[]
  expenses        Expense[]
  
  @@map("organizations")
}


// "vatCategories" table.
model VatCategory {
  id    Int             @id @default(autoincrement())
  type  VatCategoryType
  name  String          @db.VarChar(100) 

  // relations
  organizations Organization[]

  @@unique([type, name])
  @@map("vatCategories")
}

enum VatCategoryType {
  REGISTERED_RESPONSIBLE
  MONOTAX
  EXEMPT
  NOT_RESPONSIBLE
  FINAL_CONSUMER
  UNCATEGORIZED_SUBJECT
  UNREGISTERED_RESPONSIBLE
  SUBJECT_TO_VAT_WITHHOLDING
  NOT_SUBJECT_TO_VAT
  REGISTERED_RESPONSIBLE_M
}


// "usersOrganizations" table.
model UserOrganization {
  userId          String
  organizationId  String

  // relations
  user            User          @relation(fields: [userId], references: [id])
  organization    Organization  @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
  @@map("usersOrganizations")
}


// // "expenses" table.
model Expense {
  id                  String          @id @default(uuid())
  organizationId      String
  categoryId          Int
  status              ExpenseStatus
  title               String          @db.VarChar(100)
  description         String?         @db.VarChar(250)
  amount              Decimal         @db.Decimal(12, 2)
  paymentMethodId     Int?
  datePaid            DateTime?
  invoiceLink         String         @db.VarChar(250)
  paymentReceiptLink  String? @db.VarChar(250)
  expirationDate      DateTime
  createdBy           String
  updatedBy           String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime?

  // relations
  organization       Organization    @relation(fields: [organizationId], references: [id])
  category           ExpenseCategory @relation(fields: [categoryId], references: [id])
  paymentMethod      PaymentMethod?  @relation(fields: [paymentMethodId], references: [id])

  @@map("expenses")
}

enum ExpenseStatus {
  PAID
  PENDING
}


// "expenseCategories" table.
model ExpenseCategory {
  id    Int                 @id @default(autoincrement())
  type  ExpenseCategoryType
  name  String              @db.VarChar(100)

  // relations
  expenses  Expense[]

  @@unique([type, name])
  @@map("expenseCategories")
}

enum ExpenseCategoryType {
  OPERATING
  SERVICE
  SUPPLY
  MISCELLANEOUS
  EXTRAORDINARY
  SALARY
  DAILY
  FUEL
  PERCEPTION
  STATIONERY
  CLEANING
  MAINTENANCE
  CAPTURE
}


// "paymentMethods" table.
model PaymentMethod {
  id    Int                 @id @default(autoincrement())
  type  PaymentMethodType
  name  String              @db.VarChar(100)

  // relations
  expenses  Expense[]

  @@unique([type, name])
  @@map("paymentMethods")
}

enum PaymentMethodType {
  CASH
  BNA
  MP
  GALICIA
  BBVA
  UALA
  BRUBANK
}